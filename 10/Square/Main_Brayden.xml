<?xml version="1.0" ?>
<class>
	<keyword> class </keyword>
	<identifier> Main </identifier>
	<symbol> { </symbol>
	<class_variable_declaration>
		<keyword> static </keyword>
		<keyword> boolean </keyword>
		<identifier> test </identifier>
		<symbol> ; </symbol>
	</class_variable_declaration>
	<subroutine_declaration>
		<keyword> function </keyword>
		<keyword> void </keyword>
		<identifier> main </identifier>
		<symbol> ( </symbol>
		<parameter_list/>
		<symbol> ) </symbol>
		<subroutine_body>
			<symbol> { </symbol>
			<local_variable_declaration>
				<keyword> var </keyword>
				<identifier> SquareGame </identifier>
				<identifier> game </identifier>
				<symbol> ; </symbol>
			</local_variable_declaration>
			<statements>
				<let_statement>
					<keyword> let </keyword>
					<identifier> game </identifier>
					<symbol> = </symbol>
					<expression>
						<term>
							<identifier> SquareGame </identifier>
							<symbol> . </symbol>
							<identifier> new </identifier>
							<symbol> ( </symbol>
							<expression_list/>
							<symbol> ) </symbol>
						</term>
					</expression>
					<symbol> ; </symbol>
				</let_statement>
				<do_statement>
					<keyword> do </keyword>
					<identifier> game </identifier>
					<symbol> . </symbol>
					<identifier> run </identifier>
					<symbol> ( </symbol>
					<expression_list/>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</do_statement>
				<do_statement>
					<keyword> do </keyword>
					<identifier> game </identifier>
					<symbol> . </symbol>
					<identifier> dispose </identifier>
					<symbol> ( </symbol>
					<expression_list/>
					<symbol> ) </symbol>
					<symbol> ; </symbol>
				</do_statement>
				<return_statement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</return_statement>
			</statements>
			<symbol> } </symbol>
		</subroutine_body>
	</subroutine_declaration>
	<subroutine_declaration>
		<keyword> function </keyword>
		<keyword> void </keyword>
		<identifier> test </identifier>
		<symbol> ( </symbol>
		<parameter_list/>
		<symbol> ) </symbol>
		<subroutine_body>
			<symbol> { </symbol>
			<local_variable_declaration>
				<keyword> var </keyword>
				<keyword> int </keyword>
				<identifier> i </identifier>
				<symbol> , </symbol>
				<identifier> j </identifier>
				<symbol> ; </symbol>
			</local_variable_declaration>
			<local_variable_declaration>
				<keyword> var </keyword>
				<identifier> String </identifier>
				<identifier> s </identifier>
				<symbol> ; </symbol>
			</local_variable_declaration>
			<local_variable_declaration>
				<keyword> var </keyword>
				<identifier> Array </identifier>
				<identifier> a </identifier>
				<symbol> ; </symbol>
			</local_variable_declaration>
			<statements>
				<if_statement>
					<keyword> if </keyword>
					<symbol> ( </symbol>
					<expression>
						<term>
							<keyword> false </keyword>
						</term>
					</expression>
					<symbol> ) </symbol>
					<symbol> { </symbol>
					<statements>
						<let_statement>
							<keyword> let </keyword>
							<identifier> s </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<string_constant> stringconstant </string_constant>
								</term>
							</expression>
							<symbol> ; </symbol>
						</let_statement>
						<let_statement>
							<keyword> let </keyword>
							<identifier> s </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<keyword> null </keyword>
								</term>
							</expression>
							<symbol> ; </symbol>
						</let_statement>
						<let_statement>
							<keyword> let </keyword>
							<identifier> a </identifier>
							<symbol> [ </symbol>
							<expression>
								<term>
									<integer_constant> 1 </integer_constant>
								</term>
							</expression>
							<symbol> ] </symbol>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> a </identifier>
									<symbol> [ </symbol>
									<expression>
										<term>
											<integer_constant> 2 </integer_constant>
										</term>
									</expression>
									<symbol> ] </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</let_statement>
					</statements>
					<symbol> } </symbol>
					<keyword> else </keyword>
					<symbol> { </symbol>
					<statements>
						<let_statement>
							<keyword> let </keyword>
							<identifier> i </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> i </identifier>
								</term>
								<symbol> * </symbol>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<symbol> - </symbol>
										</term>
									</expression>
									<identifier> j </identifier>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</let_statement>
						<let_statement>
							<keyword> let </keyword>
							<identifier> j </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> j </identifier>
								</term>
								<symbol> / </symbol>
								<term>
									<symbol> ( </symbol>
									<expression>
										<term>
											<symbol> - </symbol>
										</term>
									</expression>
									<integer_constant> 2 </integer_constant>
									<symbol> ) </symbol>
								</term>
							</expression>
							<symbol> ; </symbol>
						</let_statement>
						<let_statement>
							<keyword> let </keyword>
							<identifier> i </identifier>
							<symbol> = </symbol>
							<expression>
								<term>
									<identifier> i </identifier>
								</term>
								<symbol> | </symbol>
								<term>
									<identifier> j </identifier>
								</term>
							</expression>
							<symbol> ; </symbol>
						</let_statement>
					</statements>
					<symbol> } </symbol>
				</if_statement>
				<return_statement>
					<keyword> return </keyword>
					<symbol> ; </symbol>
				</return_statement>
			</statements>
			<symbol> } </symbol>
		</subroutine_body>
	</subroutine_declaration>
	<symbol> } </symbol>
</class>
